
    /**
     * [ROOT] 读取表数据
     * @param config 读取配置
     * @return 表数据
     * @param <RT> 读取类型
     */
    public <RT> List<RT> readSheetData(ReaderConfig<RT> config) {
        ReaderConfig<RT> readerConfig = config;
        if (readerConfig == null){
            throw new IllegalArgumentException("读取配置不能为空");
        }

    }

    /**
     * @param sheetIndex 表索引
     */
    @SuppressWarnings("unchecked")
    public <RT> List<T> readSheetData(int sheetIndex,Class<T> clazz,int start ,int end) {
        if (clazz == null || clazz == Object.class){
            throw new IllegalArgumentException("读取的类型对象不能为空");
        }
        // sheetIndex < 0 代表该文件中不存在该sheet
        if (sheetIndex < 0){
            if (readerConfig.getReadFeatureAsBoolean(ReadExcelFeature.IGNORE_EMPTY_SHEET_ERROR)){
                return null;
            }else{
                String msg = readerConfig.getSheetName() != null ? "表名[" + readerConfig.getSheetName() + "]不存在" : "表索引[" + sheetIndex + "]不存在";
                LOGGER.error(msg);
                throw new IllegalArgumentException(msg);
            }
        }
        readerConfig.setCastClass(clazz);
        readerConfig.setSheetIndex(sheetIndex);
        Sheet sheetAt = workBookContext.getWorkbook().getSheetAt(sheetIndex);
        // TODO 分页加载数据
        int physicalNumberOfRows = sheetAt.getPhysicalNumberOfRows();
        int lastRowNum = sheetAt.getLastRowNum();
        return (List<T>) loadData(0,lastRowNum);
    }

    /**
     * @param sheetName 表名
     */
    public List<T> readSheetData(String sheetName, Class<T> clazz,int start ,int end) {
        if (Validator.strIsBlank(sheetName)){throw new IllegalArgumentException("表名不能为空");}
        readerConfig.setSheetName(sheetName);
        int sheetIndex = this.workBookContext.getWorkbook().getSheetIndex(sheetName);
        return readSheetData(sheetIndex,clazz,start,end);
    }

    /**
     *
     */
    public void readClassAsList(){
        //TODO 直接根据class获取信息
//        IndexWorkSheet declaredAnnotation = this.castClass.getDeclaredAnnotation(IndexWorkSheet.class);
    }

    /**
     * 填充单元格数据到对象
     *
     * @param instance 实例对象
     * @param row 当前行
     */
    @SneakyThrows
    @SuppressWarnings({"unchecked"})
    private void putRowToInstance(Object instance, Row row){
        // 填充到map
        if (instance instanceof Map<?,?> info){
            this.putRowToMapInstance((Map<String, Object>) info,row);
        }else{
            Class<?> castClass = readerConfig.getCastClass();
            Map<String, EntityCellMappingInfo<?>> positionMappingInfos = readerConfig.getPositionMappingInfos();
            List<EntityCellMappingInfo<?>> indexMappingInfos = readerConfig.getIndexMappingInfos();
            for (EntityCellMappingInfo<?> mappingInfo : indexMappingInfos) {
                Field field = castClass.getDeclaredField(mappingInfo.getFieldName());
                field.setAccessible(true);
                // 1. 获取单元格值
                int columnPosition = mappingInfo.getColumnPosition();
                CellGetInfo cellValue;
                if (columnPosition == -1){
                    cellValue = new CellGetInfo(false,mappingInfo.fillDefaultPrimitiveValue(null));
                }else{
                    cellValue = getCellValue(row.getCell(columnPosition), mappingInfo);
                }
                LOGGER.debug(mappingInfo.getFieldName() + ":" + cellValue);
                // 2. 转换单元格值
                Object adaptiveValue = this.adaptiveEntityClass(cellValue, mappingInfo);
                LOGGER.debug("转换前："+cellValue.getCellValue()+" 转换后："+adaptiveValue);
                // 3. 设置单元格值到实体
//                field.set(instance,adaptiveValue);
            }
        }
    }



